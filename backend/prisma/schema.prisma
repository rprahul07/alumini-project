generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                   @id @default(autoincrement())
  fullName                String                @map("full_name") @db.VarChar(100)
  email                   String                @unique @db.VarChar(100)
  password                String                @db.VarChar(255)
  phoneNumber             String?               @map("phone_number") @db.VarChar(20)
  department              String?               @db.VarChar(100)
  role                    Role
  createdAt               DateTime              @default(now()) @map("created_at")
  photoUrl                String?               @map("photo_url") @db.VarChar(500)
  bio                     String?
  linkedinUrl             String?               @map("linkedin_url") @db.VarChar(500)
  workExperience          Json?                 @map("work_experience")
  githubUrl               String?               @map("github_url") @db.VarChar(500)
  twitterUrl              String?               @map("twitter_url") @db.VarChar(500)
  currentJobTitle         String?
  highestQualification    String?
  totalExperience         Int?
  resumeUrl               String?               @map("resume_url") @db.VarChar(500)
  skills                  String[]              @default([])
  bookmarks               Bookmark[]
  jobRegistrations        JobRegistration[]
  admin                   Admin?
  alumni                  Alumni?
  event_registrations     event_registrations[]
  events                  Event[]
  faculty                 Faculty?
  jobs                    Job[]
  passwordReset           PasswordReset?
  student                 Student?
  supportRequestsReceived supportRequest[]      @relation("SupportAlumni")
  supportRequestsSent     supportRequest[]      @relation("SupportRequester")
  testimonials            Testimonial[]
  spotlights              Spotlight[]
  @@index([email])
  @@map("users")
}

model Alumni {
  id              Int        @id @default(autoincrement())
  graduationYear  Int        @map("graduation_year")
  course          String?    @db.VarChar(100)
  currentJobTitle String     @map("current_job_title") @db.VarChar(100)
  companyName     String     @map("company_name") @db.VarChar(100)
  userId          Int        @unique @map("user_id")
  company_role    String?    @map("company_role") @db.VarChar(100)
  bookmarks       Bookmark[]
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alumni")
}

model Student {
  id              Int    @id @default(autoincrement())
  rollNumber      String @unique @map("roll_number") @db.VarChar(50)
  userId          Int    @unique @map("user_id")
  currentSemester Int    @map("current_semester")
  graduationYear  Int?   @map("graduation_year")
  batch_endYear   Int?   @map("batch_end_year")
  batch_startYear Int?   @map("batch_start_year")
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Faculty {
  id          Int    @id @default(autoincrement())
  designation String @db.VarChar(100)
  userId      Int    @unique @map("user_id")
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("faculty")
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Event {
  id                  Int                   @id @default(autoincrement())
  userId              Int                   @map("user_id")
  name                String                @db.VarChar(200)
  date                DateTime
  time                String                @db.VarChar(20)
  type                String                @db.VarChar(100)
  description         String?
  location            String                @db.VarChar(200)
  organizer           String                @db.VarChar(100)
  imageUrl            String?               @map("image_url") @db.VarChar(500)
  status              EventStatus           @default(pending)
  maxCapacity         Int?                  @map("max_capacity")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  event_registrations event_registrations[]
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([type])
  @@index([status])
  @@map("events")
}

model supportRequest {
  id                  Int      @id @default(autoincrement())
  support_requester   Int      @map("user_id")
  alumniId            Int?     @map("alumni_id")
  status              String   @default("pending") @db.VarChar(20)
  createdAt           DateTime @default(now()) @map("created_at")
  descriptionbyUser   String   @default("") @db.VarChar(500)
  descriptionbyAlumni String?  @default("") @db.VarChar(500)
  tier                Int      @default(1)
  alumni              User?    @relation("SupportAlumni", fields: [alumniId], references: [id])
  requester           User     @relation("SupportRequester", fields: [support_requester], references: [id], onDelete: Cascade)

  @@index([support_requester])
  @@index([alumniId])
  @@map("support_requests")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  action    String   @db.VarChar(100)
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  userType  Role     @map("user_type")

  @@index([userId])
  @@map("activity_logs")
}

model PasswordChangeLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  changedAt DateTime @default(now()) @map("changed_at")
  userType  Role     @map("user_type")

  @@index([userId])
  @@map("password_change_logs")
}

model EmailChangeLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  oldEmail  String   @map("old_email") @db.VarChar(100)
  newEmail  String   @map("new_email") @db.VarChar(100)
  changedAt DateTime @default(now()) @map("changed_at")
  userType  Role     @map("user_type")

  @@index([userId])
  @@map("email_change_logs")
}

model event_registrations {
  id                 Int      @id @default(autoincrement())
  registered_user_id Int
  event_id           Int
  registered_at      DateTime @default(now())
  events             Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  users              User     @relation(fields: [registered_user_id], references: [id], onDelete: Cascade)

  @@unique([registered_user_id, event_id])
  @@index([event_id])
  @@index([registered_user_id])
}

model Job {
  id                   Int               @id @default(autoincrement())
  userId               Int               @map("user_id")
  companyName          String            @db.VarChar(200)
  jobTitle             String            @db.VarChar(200)
  description          String
  status               JobStatus         @default(pending)
  createdAt            DateTime          @default(now()) @map("created_at")
  deadline             DateTime?         @map("deadline")
  getEmailNotification Boolean?          @map("get_email_notification")
  registrationLink     String?           @map("registration_link") @db.VarChar(500)
  registrationType     RegistrationType  @default(internal) @map("registration_type")
  type                 JobType           @default(job)
  location             String?           @db.VarChar(200)
  jobRegistrations     JobRegistration[]
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model ResumableUpload {
  fileId         String   @id @unique
  fileName       String
  totalChunks    Int
  uploadedBlocks String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("resumable_uploads")
}

model JobRegistration {
  createdAt DateTime @default(now())
  jobId     Int
  userId    Int
  id        Int      @id @default(autoincrement())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  alumniId  Int
  createdAt DateTime @default(now())
  alumni    Alumni   @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, alumniId])
  @@index([userId])
  @@index([alumniId])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String   @db.VarChar(10)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

enum Role {
  student
  alumni
  faculty
  admin
}

enum EventStatus {
  pending
  approved
  rejected
}

enum RegistrationType {
  internal
  external
}

enum JobStatus {
  pending
  approved
  rejected
  closed
}

enum JobType {
  job
  internship
}
model Testimonial {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  content     String   @db.VarChar(1000)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Added onDelete: Cascade

  @@index([userId])
  @@map("testimonials")
}
model ContactUs {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  email       String   @db.VarChar(100)
  subject     String   @db.VarChar(100)
  message     String   @db.VarChar(1000)
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("contacts")
}
model Announcement {
  id          Int      @id @default(autoincrement())
  order       Int      @default(0)
  title       String   @db.VarChar(200)
  content     String   @db.VarChar(1000)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("announcements")
}
model Gallery {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  description String?  @db.VarChar(500)
  redirectionUrl String? @map("redirect_url") @db.VarChar(500)
  imageUrl    String   @map("image_url") @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("gallery")
}

model Spotlight {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  description String?  @db.VarChar(500)
  redirectionUrl String? @map("redirect_url") @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("spotlights")
}