generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  fullName       String   @map("full_name") @db.VarChar(100)
  email          String   @unique @db.VarChar(100)
  password       String   @db.VarChar(255)
  phoneNumber    String?  @map("phone_number") @db.VarChar(20)
  department     String?  @db.VarChar(100)
  role           Role
  createdAt      DateTime @default(now()) @map("created_at")
  photoUrl       String?  @map("photo_url") @db.VarChar(500)
  bio            String?
  linkedinUrl    String?  @map("linkedin_url") @db.VarChar(500)
  workExperience Json?    @map("work_experience")
  githubUrl      String?  @map("github_url") @db.VarChar(500)
  twitterUrl     String?  @map("twitter_url") @db.VarChar(500)
  admin          Admin?
  alumni         Alumni?
  events         Event[]
  faculty        Faculty?
  student        Student?

  supportRequestsSent     supportRequest[] @relation("SupportRequester")
  supportRequestsReceived supportRequest[] @relation("SupportAlumni")

  @@index([email])
  @@map("users")
}

model Alumni {
  id              Int     @id @default(autoincrement())
  graduationYear  Int     @map("graduation_year")
  course          String? @db.VarChar(100)
  currentJobTitle String  @map("current_job_title") @db.VarChar(100)
  companyName     String  @map("company_name") @db.VarChar(100)
  userId          Int     @unique @map("user_id")
  company_role    String? @map("company_role") @db.VarChar(100)
  user            User    @relation(fields: [userId], references: [id])

  @@map("alumni")
}

model Student {
  id              Int    @id @default(autoincrement())
  rollNumber      String @unique @map("roll_number") @db.VarChar(50)
  userId          Int    @unique @map("user_id")
  currentSemester Int    @map("current_semester")
  graduationYear  Int?   @map("graduation_year")
  batch_endYear   Int?   @map("batch_end_year")
  batch_startYear Int?   @map("batch_start_year")
  user            User   @relation(fields: [userId], references: [id])

  @@map("students")
}

model Faculty {
  id          Int    @id @default(autoincrement())
  designation String @db.VarChar(100)
  userId      Int    @unique @map("user_id")
  user        User   @relation(fields: [userId], references: [id])

  @@map("faculty")
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Event {
  id              Int         @id @default(autoincrement())
  userId          Int         @map("user_id")
  name            String      @db.VarChar(200)
  date            DateTime
  time            String      @db.VarChar(20)
  type            String      @db.VarChar(100)
  description     String?
  location        String      @db.VarChar(200)
  organizer       String      @db.VarChar(100)
  imageUrl        String?     @map("image_url") @db.VarChar(500)
  status          EventStatus @default(pending)
  registeredUsers Int[]       @map("registered_users")
  maxCapacity     Int?        @map("max_capacity")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  user            User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([type])
  @@index([status])
  @@map("events")
}
model supportRequest {
  id                  Int      @id @default(autoincrement())
  support_requester   Int      @map("user_id")
  descriptionbyUser   String   @default("") @db.VarChar(500)
  descriptionbyAlumni String? @default("") @db.VarChar(500)
  alumniId            Int?     @map("alumni_id")
  status              String   @default("pending") @db.VarChar(20)
  createdAt           DateTime @default(now()) @map("created_at")

  // âœ… Relations
  requester User @relation("SupportRequester", fields: [support_requester], references: [id])
  alumni    User? @relation("SupportAlumni", fields: [alumniId], references: [id])

  @@index([support_requester])
  @@index([alumniId])
  @@map("support_requests")
}


model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  action    String   @db.VarChar(100)
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  userType  Role     @map("user_type")

  @@index([userId])
  @@map("activity_logs")
}

model PasswordChangeLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  changedAt DateTime @default(now()) @map("changed_at")
  userType  Role     @map("user_type")

  @@index([userId])
  @@map("password_change_logs")
}

model EmailChangeLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  oldEmail  String   @map("old_email") @db.VarChar(100)
  newEmail  String   @map("new_email") @db.VarChar(100)
  changedAt DateTime @default(now()) @map("changed_at")
  userType  Role     @map("user_type")

  @@index([userId])
  @@map("email_change_logs")
}

enum Role {
  student
  alumni
  faculty
  admin
}

enum EventStatus {
  pending
  approved
  rejected
}
